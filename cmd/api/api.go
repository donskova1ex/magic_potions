// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Swagger Potion maker - OpenAPI 3.0
 *
 * Сервис изготовления зелий
 *
 * API version: 1.0.0
 */

package main

import (
	"context"
	"log"
	"log/slog"
	"net/http"
	"os"
	"os/signal"
	"sync"
	"syscall"
	"time"

	"github.com/donskova1ex/magic_potions/internal/processors"
	"github.com/donskova1ex/magic_potions/internal/repositories"

	openapi "github.com/donskova1ex/magic_potions/openapi"
)

func main() {
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()
	log.Printf("Server started")

	logJSONHandler := slog.NewJSONHandler(os.Stdout, nil)
	logger := slog.New(logJSONHandler)

	slog.SetDefault(logger)

	pgDSN := os.Getenv("POSTGRES_DSN")
	if pgDSN == "" {
		logger.Error("empty POSTGRES_DSN")
		os.Exit(1)
	}

	apiPort := os.Getenv("API_PORT")
	if apiPort == "" {
		logger.Error("empty API_PORT")
		os.Exit(1)
	}

	db, err := repositories.NewPostgresDB(ctx, pgDSN)
	if err != nil {
		logger.Error("can not create postgres db connection", slog.String("error", err.Error()))
		return
	}
	defer db.Close()

	repository := repositories.NewRepository(db, logger)

	ingredientProcessor := processors.NewIngredient(repository, logger)
	IngredientAPIService := openapi.NewIngredientAPIService(ingredientProcessor, logger)
	IngredientAPIController := openapi.NewIngredientAPIController(IngredientAPIService)

	recipeProcessor := processors.NewRecipe(repository, logger)
	RecipeAPIService := openapi.NewRecipeAPIService(recipeProcessor, logger)
	RecipeAPIController := openapi.NewRecipeAPIController(RecipeAPIService)

	witchProcessor := processors.NewWitch(repository, logger)
	WitchAPIService := openapi.NewWitchAPIService(witchProcessor, logger)
	WitchAPIController := openapi.NewWitchAPIController(WitchAPIService)

	router := openapi.NewRouter(IngredientAPIController, RecipeAPIController, WitchAPIController)

	httpServer := http.Server{
		Addr:     ":" + apiPort,
		ErrorLog: slog.NewLogLogger(logJSONHandler, slog.LevelError),
		Handler:  router,
	}
	shutdownWg := &sync.WaitGroup{}
	shutdownWg.Add(2)

	func ()  {
		defer shutdownWg.Done()
		signals := make(chan os.Signal, 1)
		signal.Notify(signals, syscall.SIGTERM, syscall.SIGINT)
		select{
		case <-signals:
			cancel()
		case <-ctx.Done(): 
		}
		shutdownCtx, cancel := context.WithTimeout(context.Background(), time.Second * 5)
		defer cancel()

		err := httpServer.Shutdown(shutdownCtx)
		if err != nil {
			logger.Error("can not shutdown http server")
		}
		
		err = db.Close()
		if err != nil {

		}
	}()
	logger.Info("application started", slog.String("port", apiPort))
	if err := httpServer.ListenAndServe(); err != nil {
		logger.Error("failed to start server", slog.String("err", err.Error()))
	}
}


//TODO: gracefull shutdow сделать