// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/proto/brewing.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BrewingService_StartCooking_FullMethodName     = "/brewing.BrewingService/StartCooking"
	BrewingService_GetCookingStatus_FullMethodName = "/brewing.BrewingService/GetCookingStatus"
)

// BrewingServiceClient is the client API for BrewingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrewingServiceClient interface {
	StartCooking(ctx context.Context, in *StartCookingRequest, opts ...grpc.CallOption) (*StartCookingResponse, error)
	GetCookingStatus(ctx context.Context, in *GetCookingStatusRequest, opts ...grpc.CallOption) (*GetCookingStatusResponse, error)
}

type brewingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBrewingServiceClient(cc grpc.ClientConnInterface) BrewingServiceClient {
	return &brewingServiceClient{cc}
}

func (c *brewingServiceClient) StartCooking(ctx context.Context, in *StartCookingRequest, opts ...grpc.CallOption) (*StartCookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartCookingResponse)
	err := c.cc.Invoke(ctx, BrewingService_StartCooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brewingServiceClient) GetCookingStatus(ctx context.Context, in *GetCookingStatusRequest, opts ...grpc.CallOption) (*GetCookingStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCookingStatusResponse)
	err := c.cc.Invoke(ctx, BrewingService_GetCookingStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrewingServiceServer is the server API for BrewingService service.
// All implementations must embed UnimplementedBrewingServiceServer
// for forward compatibility.
type BrewingServiceServer interface {
	StartCooking(context.Context, *StartCookingRequest) (*StartCookingResponse, error)
	GetCookingStatus(context.Context, *GetCookingStatusRequest) (*GetCookingStatusResponse, error)
	mustEmbedUnimplementedBrewingServiceServer()
}

// UnimplementedBrewingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBrewingServiceServer struct{}

func (UnimplementedBrewingServiceServer) StartCooking(context.Context, *StartCookingRequest) (*StartCookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCooking not implemented")
}
func (UnimplementedBrewingServiceServer) GetCookingStatus(context.Context, *GetCookingStatusRequest) (*GetCookingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCookingStatus not implemented")
}
func (UnimplementedBrewingServiceServer) mustEmbedUnimplementedBrewingServiceServer() {}
func (UnimplementedBrewingServiceServer) testEmbeddedByValue()                        {}

// UnsafeBrewingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrewingServiceServer will
// result in compilation errors.
type UnsafeBrewingServiceServer interface {
	mustEmbedUnimplementedBrewingServiceServer()
}

func RegisterBrewingServiceServer(s grpc.ServiceRegistrar, srv BrewingServiceServer) {
	// If the following call pancis, it indicates UnimplementedBrewingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BrewingService_ServiceDesc, srv)
}

func _BrewingService_StartCooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartCookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrewingServiceServer).StartCooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrewingService_StartCooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrewingServiceServer).StartCooking(ctx, req.(*StartCookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrewingService_GetCookingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCookingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrewingServiceServer).GetCookingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrewingService_GetCookingStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrewingServiceServer).GetCookingStatus(ctx, req.(*GetCookingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BrewingService_ServiceDesc is the grpc.ServiceDesc for BrewingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrewingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "brewing.BrewingService",
	HandlerType: (*BrewingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartCooking",
			Handler:    _BrewingService_StartCooking_Handler,
		},
		{
			MethodName: "GetCookingStatus",
			Handler:    _BrewingService_GetCookingStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/brewing.proto",
}
