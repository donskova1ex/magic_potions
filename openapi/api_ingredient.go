// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Swagger Potion maker - OpenAPI 3.0
 *
 * Сервис изготовления зелий
 *
 * API version: 1.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// IngredientAPIController binds http requests to an api service and writes the service results to the http response
type IngredientAPIController struct {
	service      IngredientAPIServicer
	errorHandler ErrorHandler
}

// IngredientAPIOption for how the controller is set up.
type IngredientAPIOption func(*IngredientAPIController)

// WithIngredientAPIErrorHandler inject ErrorHandler into controller
func WithIngredientAPIErrorHandler(h ErrorHandler) IngredientAPIOption {
	return func(c *IngredientAPIController) {
		c.errorHandler = h
	}
}

// NewIngredientAPIController creates a default api controller
func NewIngredientAPIController(s IngredientAPIServicer, opts ...IngredientAPIOption) *IngredientAPIController {
	controller := &IngredientAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IngredientAPIController
func (c *IngredientAPIController) Routes() Routes {
	return Routes{
		"IngredientsList": Route{
			strings.ToUpper("Get"),
			"/api/v1/ingredients",
			c.IngredientsList,
		},
		"GetIngredientByUUID": Route{
			strings.ToUpper("Get"),
			"/api/v1/ingredient/{uuid}",
			c.GetIngredientByUUID,
		},
		"UpdateIngredientByUUID": Route{
			strings.ToUpper("Put"),
			"/api/v1/ingredient/{uuid}",
			c.UpdateIngredientByUUID,
		},
		"DeleteIngredientByUUID": Route{
			strings.ToUpper("Delete"),
			"/api/v1/ingredient/{uuid}",
			c.DeleteIngredientByUUID,
		},
	}
}

// IngredientsList - Ingredients list
func (c *IngredientAPIController) IngredientsList(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.IngredientsList(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIngredientByUUID - Find ingredient by UUID
func (c *IngredientAPIController) GetIngredientByUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	result, err := c.service.GetIngredientByUUID(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateIngredientByUUID - Update a ingredient by uuid
func (c *IngredientAPIController) UpdateIngredientByUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	ingredientParam := Ingredient{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&ingredientParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIngredientRequired(ingredientParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIngredientConstraints(ingredientParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateIngredientByUUID(r.Context(), uuidParam, ingredientParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteIngredientByUUID - Delete ingredient
func (c *IngredientAPIController) DeleteIngredientByUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	result, err := c.service.DeleteIngredientByUUID(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
