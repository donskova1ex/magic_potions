// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/donskova1ex/magic_potions/internal/processors (interfaces: WitchesRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/donskova1ex/magic_potions/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// WitchesRepository is a mock of WitchesRepository interface.
type WitchesRepository struct {
	ctrl     *gomock.Controller
	recorder *WitchesRepositoryMockRecorder
}

// WitchesRepositoryMockRecorder is the mock recorder for WitchesRepository.
type WitchesRepositoryMockRecorder struct {
	mock *WitchesRepository
}

// NewWitchesRepository creates a new mock instance.
func NewWitchesRepository(ctrl *gomock.Controller) *WitchesRepository {
	mock := &WitchesRepository{ctrl: ctrl}
	mock.recorder = &WitchesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *WitchesRepository) EXPECT() *WitchesRepositoryMockRecorder {
	return m.recorder
}

// CreateWitch mocks base method.
func (m *WitchesRepository) CreateWitch(arg0 context.Context, arg1 *domain.Witch) (*domain.Witch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWitch", arg0, arg1)
	ret0, _ := ret[0].(*domain.Witch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWitch indicates an expected call of CreateWitch.
func (mr *WitchesRepositoryMockRecorder) CreateWitch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWitch", reflect.TypeOf((*WitchesRepository)(nil).CreateWitch), arg0, arg1)
}

// DeleteWitchByUUID mocks base method.
func (m *WitchesRepository) DeleteWitchByUUID(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWitchByUUID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWitchByUUID indicates an expected call of DeleteWitchByUUID.
func (mr *WitchesRepositoryMockRecorder) DeleteWitchByUUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWitchByUUID", reflect.TypeOf((*WitchesRepository)(nil).DeleteWitchByUUID), arg0, arg1)
}

// UpdateWitchByUUID mocks base method.
func (m *WitchesRepository) UpdateWitchByUUID(arg0 context.Context, arg1 *domain.Witch) (*domain.Witch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWitchByUUID", arg0, arg1)
	ret0, _ := ret[0].(*domain.Witch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWitchByUUID indicates an expected call of UpdateWitchByUUID.
func (mr *WitchesRepositoryMockRecorder) UpdateWitchByUUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWitchByUUID", reflect.TypeOf((*WitchesRepository)(nil).UpdateWitchByUUID), arg0, arg1)
}

// WitchByUUID mocks base method.
func (m *WitchesRepository) WitchByUUID(arg0 context.Context, arg1 string) (*domain.Witch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WitchByUUID", arg0, arg1)
	ret0, _ := ret[0].(*domain.Witch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WitchByUUID indicates an expected call of WitchByUUID.
func (mr *WitchesRepositoryMockRecorder) WitchByUUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WitchByUUID", reflect.TypeOf((*WitchesRepository)(nil).WitchByUUID), arg0, arg1)
}

// WitchesAll mocks base method.
func (m *WitchesRepository) WitchesAll(arg0 context.Context) ([]*domain.Witch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WitchesAll", arg0)
	ret0, _ := ret[0].([]*domain.Witch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WitchesAll indicates an expected call of WitchesAll.
func (mr *WitchesRepositoryMockRecorder) WitchesAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WitchesAll", reflect.TypeOf((*WitchesRepository)(nil).WitchesAll), arg0)
}
