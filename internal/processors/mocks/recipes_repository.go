// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/donskova1ex/magic_potions/internal/processors (interfaces: RecipesRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/donskova1ex/magic_potions/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// RecipesRepository is a mock of RecipesRepository interface.
type RecipesRepository struct {
	ctrl     *gomock.Controller
	recorder *RecipesRepositoryMockRecorder
}

// RecipesRepositoryMockRecorder is the mock recorder for RecipesRepository.
type RecipesRepositoryMockRecorder struct {
	mock *RecipesRepository
}

// NewRecipesRepository creates a new mock instance.
func NewRecipesRepository(ctrl *gomock.Controller) *RecipesRepository {
	mock := &RecipesRepository{ctrl: ctrl}
	mock.recorder = &RecipesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *RecipesRepository) EXPECT() *RecipesRepositoryMockRecorder {
	return m.recorder
}

// CreateIngredient mocks base method.
func (m *RecipesRepository) CreateIngredient(arg0 context.Context, arg1 *domain.Ingredient) (*domain.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIngredient", arg0, arg1)
	ret0, _ := ret[0].(*domain.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIngredient indicates an expected call of CreateIngredient.
func (mr *RecipesRepositoryMockRecorder) CreateIngredient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIngredient", reflect.TypeOf((*RecipesRepository)(nil).CreateIngredient), arg0, arg1)
}

// CreateRecipe mocks base method.
func (m *RecipesRepository) CreateRecipe(arg0 context.Context, arg1 *domain.Recipe) (*domain.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecipe", arg0, arg1)
	ret0, _ := ret[0].(*domain.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecipe indicates an expected call of CreateRecipe.
func (mr *RecipesRepositoryMockRecorder) CreateRecipe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecipe", reflect.TypeOf((*RecipesRepository)(nil).CreateRecipe), arg0, arg1)
}

// DeleteRecipeByUUID mocks base method.
func (m *RecipesRepository) DeleteRecipeByUUID(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecipeByUUID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecipeByUUID indicates an expected call of DeleteRecipeByUUID.
func (mr *RecipesRepositoryMockRecorder) DeleteRecipeByUUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecipeByUUID", reflect.TypeOf((*RecipesRepository)(nil).DeleteRecipeByUUID), arg0, arg1)
}

// RecipeByUUID mocks base method.
func (m *RecipesRepository) RecipeByUUID(arg0 context.Context, arg1 string) (*domain.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecipeByUUID", arg0, arg1)
	ret0, _ := ret[0].(*domain.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecipeByUUID indicates an expected call of RecipeByUUID.
func (mr *RecipesRepositoryMockRecorder) RecipeByUUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecipeByUUID", reflect.TypeOf((*RecipesRepository)(nil).RecipeByUUID), arg0, arg1)
}

// RecipesAll mocks base method.
func (m *RecipesRepository) RecipesAll(arg0 context.Context) ([]*domain.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecipesAll", arg0)
	ret0, _ := ret[0].([]*domain.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecipesAll indicates an expected call of RecipesAll.
func (mr *RecipesRepositoryMockRecorder) RecipesAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecipesAll", reflect.TypeOf((*RecipesRepository)(nil).RecipesAll), arg0)
}

// UpdateRecipeByUUID mocks base method.
func (m *RecipesRepository) UpdateRecipeByUUID(arg0 context.Context, arg1 *domain.Recipe) (*domain.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecipeByUUID", arg0, arg1)
	ret0, _ := ret[0].(*domain.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecipeByUUID indicates an expected call of UpdateRecipeByUUID.
func (mr *RecipesRepositoryMockRecorder) UpdateRecipeByUUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecipeByUUID", reflect.TypeOf((*RecipesRepository)(nil).UpdateRecipeByUUID), arg0, arg1)
}
